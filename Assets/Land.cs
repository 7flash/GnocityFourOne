// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Land
    {
        [JsonProperty("land_asset_id")]
        public string LandAssetId { get; set; }

        [JsonProperty("account")]
        public string Account { get; set; }

        [JsonProperty("land_id")]
        public string LandId { get; set; }

        [JsonProperty("land_type")]
        public LandType LandType { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("land_price")]
        public LandPrice LandPrice { get; set; }

        [JsonProperty("isconfirmed")]
        public long Isconfirmed { get; set; }

        [JsonProperty("setready")]
        public long Setready { get; set; }
    }

    public enum LandPrice { The0 };

    public enum LandType { Commercial, Residential };

    public partial class Land
    {
        public static Land[] FromJson(string json) => JsonConvert.DeserializeObject<Land[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Land[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                LandPriceConverter.Singleton,
                LandTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LandPriceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LandPrice) || t == typeof(LandPrice?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "0 ")
            {
                return LandPrice.The0;
            }
            throw new Exception("Cannot unmarshal type LandPrice");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LandPrice)untypedValue;
            if (value == LandPrice.The0)
            {
                serializer.Serialize(writer, "0 ");
                return;
            }
            throw new Exception("Cannot marshal type LandPrice");
        }

        public static readonly LandPriceConverter Singleton = new LandPriceConverter();
    }

    internal class LandTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LandType) || t == typeof(LandType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "commercial":
                    return LandType.Commercial;
                case "residential":
                    return LandType.Residential;
            }
            throw new Exception("Cannot unmarshal type LandType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LandType)untypedValue;
            switch (value)
            {
                case LandType.Commercial:
                    serializer.Serialize(writer, "commercial");
                    return;
                case LandType.Residential:
                    serializer.Serialize(writer, "residential");
                    return;
            }
            throw new Exception("Cannot marshal type LandType");
        }

        public static readonly LandTypeConverter Singleton = new LandTypeConverter();
    }
}
